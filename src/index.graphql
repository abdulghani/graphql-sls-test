schema {
  query: Query
  mutation: Mutation
}

interface CommonUser {
  ID: String
  name: String
}

input CreateInput {
  name: String
  email: String
}

enum Enum {
  ONE
  TWO
}

type Mutation {
  addUser(id: String): String
  createHello(payload: CreateInput): String
  createProduct(id: String): String
  editProduct(id: String): String
}

"""
describe union
"""
union MyUnion = MyUser | User

type MyUser implements CommonUser {
  ID: String
  name: String
  addedField: String
}

input PaginationInput {
  cursor: String
  limit: Int
}

input ParamInput {
  name: String
  email: String
}

"""
description for query
"""
type Query {
  aHello: MyUser
  getProduct(id: String): String
  getUser(id: String): String
  """
  description for this
  """
  hello: String
  multipleInput(payload: SearchInput, name: String!): String
  sayHello(name: String): String
  searchHello(payload: SearchInput): String
}

input SearchInput {
  pagination: PaginationInput
  param: ParamInput
}

scalar UTCDateTime

type User {
  ID: String!
  name: String!
  email: String!
}
