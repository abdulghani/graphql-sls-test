type Query {
  """
  description for this
  """
  hello: String
  searchHello(payload: SearchInput): String
  multipleInput(payload: SearchInput, name: String!): String
  sayHello(name: String): String
  createHello(payload: CreateInput): String
}

input SearchInput {
  """
  description for query
  """
  query: String! = "hello"
  string: String = "hello"
  number: Int = 10
  float: Float = 10.026
  isTrue: Boolean = false
  enum: Enum! = ONE
  listString: [String!]! = ["hello"]
  date: UTCDateTime
}

input CreateInput {
  name: String
  email: String
}

scalar UTCDateTime

enum Enum {
  ONE
  TWO
}

type User {
  ID: String!
  name: String!
  email: String!
}

union MyUnion = String | Int | Float

interface CommonUser {
  ID: String
  name: String
}

type MyUser implements CommonUser {
  ID: String
  name: String
  addedField: String
}
